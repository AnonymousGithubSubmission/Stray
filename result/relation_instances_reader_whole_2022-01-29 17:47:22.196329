__init__
def (self: Any, vocab: allennlp.data.vocabulary.Vocabulary, text_field_embedder: builtins.str, cnn_size: Literal[100]? =, dropout_weight: builtins.float =, with_entity_embeddings: builtins.bool =, sent_loss_weight: Literal[1]? =, attention_weight_fn: Literal['sigmoid']? =, attention_aggregation_fn: Literal['max']? =)
def (self: Any, vocab: allennlp.data.vocabulary.Vocabulary, text_field_embedder: allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder, cnn_size: Literal[100]? =, dropout_weight: builtins.float =, with_entity_embeddings: builtins.bool =, sent_loss_weight: Literal[1]? =, attention_weight_fn: Literal['sigmoid']? =, attention_aggregation_fn: Literal['max']? =)
def (self: Any, vocab: allennlp.data.vocabulary.Vocabulary, text_field_embedder: builtins.int, cnn_size: Literal[100]? =, dropout_weight: builtins.float =, with_entity_embeddings: builtins.bool =, sent_loss_weight: Literal[1]? =, attention_weight_fn: Literal['sigmoid']? =, attention_aggregation_fn: Literal['max']? =)

decode
def (self: relation_instances_reader.CombDistDirectRelex, output_dict: Any) -> Union[builtins.set[builtins.object], builtins.dict[builtins.str, numpy.ndarray[Any, Any]], relation_instances_reader.MultilabelAveragePrecision, builtins.object, builtins.int, allennlp.data.instance.Instance, torch.nn.modules.container.Sequential, builtins.list[numpy.ndarray[Any, Any]], allennlp.data.tokenizers.character_tokenizer.CharacterTokenizer, allennlp.data.token_indexers.single_id_token_indexer.SingleIdTokenIndexer, allennlp.common.checks.ConfigurationError, allennlp.data.token_indexers.token_indexer.TokenIndexer, builtins.list[allennlp.data.tokenizers.token_class.Token], builtins.list[builtins.str], builtins.set[torch._tensor.Tensor], builtins.list[builtins.float], builtins.dict[builtins.str, builtins.int], relation_instances_reader.CombDistDirectRelex, relation_instances_reader.RelationExtractionPredictor, relation_instances_reader.RelationInstancesReader, builtins.dict[builtins.str, builtins.bytes], builtins.set[builtins.bool], builtins.list[builtins.bytes], builtins.tuple[builtins.object], builtins.dict[builtins.object, builtins.object], allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder, allennlp.data.tokenizers.sentence_splitter.SentenceSplitter, allennlp.data.tokenizers.token_class.Token, torch.nn.modules.dropout.Dropout, builtins.set[builtins.int], torch._tensor.Tensor, builtins.dict[builtins.str, torch._tensor.Tensor], builtins.dict[builtins.str, builtins.float], builtins.list[builtins.object], builtins.dict[builtins.str, builtins.str], allennlp.data.vocabulary.Vocabulary, allennlp.predictors.predictor.Predictor, allennlp.training.metrics.average.Average, allennlp.data.dataset_readers.dataset_reader.DatasetReader, builtins.bool, builtins.set[builtins.str], builtins.set[allennlp.data.tokenizers.token_class.Token], allennlp.data.fields.sequence_label_field.SequenceLabelField, builtins.set[builtins.float], builtins.list[torch._tensor.Tensor], builtins.float, builtins.dict[builtins.str, builtins.object], builtins.set[numpy.ndarray[Any, Any]], builtins.bytes, builtins.set[builtins.bytes], builtins.dict[builtins.str, builtins.bool], allennlp.modules.seq2vec_encoders.cnn_encoder.CnnEncoder, allennlp.models.model.Model, builtins.list[builtins.bool], allennlp.data.fields.text_field.TextField, builtins.dict[builtins.str, allennlp.data.tokenizers.token_class.Token], allennlp.data.fields.label_field.LabelField, builtins.str, numpy.ndarray[Any, Any], allennlp.data.fields.list_field.ListField[Any], builtins.list[builtins.int], allennlp.training.metrics.metric.Metric, allennlp.data.fields.multilabel_field.MultiLabelField]

__init__
def (self: relation_instances_reader.MultilabelAveragePrecision, bins: Literal[1000]? =, recall_thr: builtins.float =)

reset
def (self: relation_instances_reader.MultilabelAveragePrecision)

__init__
def (self: relation_instances_reader.RelationInstancesReader, lazy: builtins.bool =, max_bag_size: Literal[25]? =, negative_exampels_percentage: Literal[100]? =, with_direct_supervision: builtins.bool =)

_positions
def (self: relation_instances_reader.RelationInstancesReader, tokens_count: builtins.int, e_loc: numpy.ndarray[Any, Any]) -> builtins.list[builtins.int*]
def (self: relation_instances_reader.RelationInstancesReader, tokens_count: numpy.ndarray[Any, Any], e_loc: numpy.ndarray[Any, Any]) -> builtins.list[builtins.int*]
def (self: relation_instances_reader.RelationInstancesReader, tokens_count: builtins.bool, e_loc: numpy.ndarray[Any, Any]) -> builtins.list[builtins.int*]

_tokens_distances
def (self: relation_instances_reader.RelationInstancesReader, tokens: builtins.list[allennlp.data.tokenizers.token_class.Token]) -> Tuple[builtins.list[allennlp.data.tokenizers.token_class.Token], Any, Any]

_tokens_distances_fields
def (self: relation_instances_reader.RelationInstancesReader, tokens: builtins.list[allennlp.data.tokenizers.token_class.Token]) -> Tuple[allennlp.data.fields.text_field.TextField, allennlp.data.fields.sequence_label_field.SequenceLabelField, allennlp.data.fields.sequence_label_field.SequenceLabelField]

forward
def (self: relation_instances_reader.CombDistDirectRelex, mentions: Any, positions1: torch._tensor.Tensor, positions2: torch._tensor.Tensor, is_direct_supervision_bag: builtins.dict[builtins.str, numpy.ndarray[Any, Any]], sent_labels: torch._tensor.Tensor, labels: torch._tensor.Tensor) -> builtins.dict[builtins.str*, Any]
def (self: relation_instances_reader.CombDistDirectRelex, mentions: Any, positions1: torch._tensor.Tensor, positions2: torch._tensor.Tensor, is_direct_supervision_bag: builtins.dict[builtins.str, torch._tensor.Tensor], sent_labels: torch._tensor.Tensor, labels: torch._tensor.Tensor) -> builtins.dict[builtins.str*, Any]
def (self: relation_instances_reader.CombDistDirectRelex, mentions: Any, positions1: torch._tensor.Tensor, positions2: torch._tensor.Tensor, is_direct_supervision_bag: numpy.ndarray[Any, Any], sent_labels: torch._tensor.Tensor, labels: torch._tensor.Tensor) -> builtins.dict[builtins.str*, Any]

__call__
def (self: relation_instances_reader.MultilabelAveragePrecision, predictions: torch._tensor.Tensor, gold_labels: torch._tensor.Tensor)

_thresholded_average_precision_score
def (self: relation_instances_reader.MultilabelAveragePrecision, precision: builtins.bytes, recall: Any) -> Tuple[Literal[0]?, builtins.int]
def (self: relation_instances_reader.MultilabelAveragePrecision, precision: builtins.str, recall: Any) -> Tuple[Literal[0]?, builtins.int]
def (self: relation_instances_reader.MultilabelAveragePrecision, precision: numpy.ndarray[Any, Any], recall: Any) -> Tuple[Literal[0]?, builtins.int]

get_metric
def (self: relation_instances_reader.MultilabelAveragePrecision, reset: builtins.bool =) -> Literal[0]?

text_to_instance
def (self: relation_instances_reader.RelationInstancesReader, e1: builtins.object, e2: builtins.object, rels: builtins.list[builtins.str], mentions: builtins.list[numpy.ndarray[Any, Any]], is_predict: builtins.object, supervision_type: builtins.object) -> Union[None, allennlp.data.instance.Instance]
def (self: relation_instances_reader.RelationInstancesReader, e1: builtins.object, e2: builtins.object, rels: builtins.list[builtins.str], mentions: builtins.bytes, is_predict: builtins.object, supervision_type: builtins.object) -> Union[None, allennlp.data.instance.Instance]
def (self: relation_instances_reader.RelationInstancesReader, e1: builtins.object, e2: builtins.object, rels: builtins.list[builtins.str], mentions: builtins.str, is_predict: builtins.object, supervision_type: builtins.object) -> Union[None, allennlp.data.instance.Instance]

_read
def (self: relation_instances_reader.RelationInstancesReader, file_path: builtins.str) -> Union[Any, Any, Any]

_json_to_instance
def (self: relation_instances_reader.RelationExtractionPredictor, json_dict: builtins.dict[builtins.str, builtins.bytes]) -> Tuple[<nothing>, builtins.dict[<nothing>, <nothing>]]
def (self: relation_instances_reader.RelationExtractionPredictor, json_dict: builtins.dict[builtins.str, builtins.str]) -> Tuple[<nothing>, builtins.dict[<nothing>, <nothing>]]
def (self: relation_instances_reader.RelationExtractionPredictor, json_dict: numpy.ndarray[Any, Any]) -> Tuple[<nothing>, builtins.dict[<nothing>, <nothing>]]

text_to_instance
def (self: relation_instances_reader.RelationInstancesReader, e1: builtins.object, e2: builtins.object, rels: builtins.list[builtins.str], mentions: builtins.list[numpy.ndarray[Any, Any]], is_predict: builtins.object, supervision_type: builtins.object) -> Union[None, allennlp.data.instance.Instance]
def (self: relation_instances_reader.RelationInstancesReader, e1: builtins.object, e2: builtins.object, rels: builtins.list[builtins.str], mentions: builtins.bytes, is_predict: builtins.object, supervision_type: builtins.object) -> Union[None, allennlp.data.instance.Instance]
def (self: relation_instances_reader.RelationInstancesReader, e1: builtins.object, e2: builtins.object, rels: builtins.list[builtins.str], mentions: builtins.str, is_predict: builtins.object, supervision_type: builtins.object) -> Union[None, allennlp.data.instance.Instance]

