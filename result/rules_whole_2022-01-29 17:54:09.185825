_count_neighbors
def (X: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, Any]

_parse_rulestring
def (r: builtins.str) -> Tuple[builtins.list[builtins.int*], builtins.list[builtins.int*]]

life_rule
def (X: numpy.ndarray[Any, Any], rulestring: builtins.str) -> numpy.ndarray[Any, Any]

conway_classic
def (X: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, Any]

shannon_entropy
def (state: numpy.ndarray[Any, Any]) -> Union[Any, numpy.ndarray[Any, numpy.dtype[Any]], numpy.ndarray[Any, numpy.dtype[numpy.timedelta64]]]

cell_coverage
def (state: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, numpy.dtype[numpy.floating[numpy.typing._64Bit]]]

parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Board, size: Tuple[Literal[100]?, Literal[100]?] =)

clear
def (self: rules.Board)

view
def (self: rules.Board, figsize: Tuple[Literal[5]?, Literal[5]?] =) -> Tuple[matplotlib.pyplot.Figure, matplotlib.image.AxesImage]

__init__
def (self: rules.Simulator, board: rules.Board)

compute_statistics
def (self: rules.Simulator, history: builtins.list[numpy.ndarray[Any, Any]]) -> builtins.dict[builtins.str*, numpy.ndarray*[Any, Any]]
def (self: rules.Simulator, history: builtins.set[numpy.ndarray[Any, Any]]) -> builtins.dict[builtins.str*, numpy.ndarray*[Any, Any]]
def (self: rules.Simulator, history: numpy.ndarray[Any, Any]) -> builtins.dict[builtins.str*, numpy.ndarray*[Any, Any]]

get_history
def (self: rules.Simulator, exclude_init: builtins.bool =) -> numpy.ndarray[Any, Any]

size
def (self: rules.Lifeform) -> builtins.tuple[builtins.int]

view
def (self: rules.Lifeform, figsize: Tuple[Literal[5]?, Literal[5]?] =) -> Tuple[matplotlib.pyplot.Figure, matplotlib.image.AxesImage]

validate_input_values
def (self: rules.Custom, X: Any)

validate_input_shapes
def (self: rules.Custom, X: numpy.ndarray[Any, Any])

layout
def (self: rules.Custom) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Glider)

layout
def (self: rules.Glider) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.LightweightSpaceship)

layout
def (self: rules.LightweightSpaceship) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.MiddleweightSpaceship)

layout
def (self: rules.MiddleweightSpaceship) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Unbounded)

layout
def (self: rules.Unbounded) -> numpy.ndarray[Any, Any]

___init___
def (self: rules.Century)

layout
def (self: rules.Century) -> numpy.ndarray[Any, Any]

___init___
def (self: rules.Thunderbird)

layout
def (self: rules.Thunderbird) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Blinker, length: Literal[3]? =)

layout
def (self: rules.Blinker) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Toad)

layout
def (self: rules.Toad) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Pulsar)

layout
def (self: rules.Pulsar) -> Any

__init__
def (self: rules.FigureEight)

layout
def (self: rules.FigureEight) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Beacon)

layout
def (self: rules.Beacon) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Pentadecathlon)

layout
def (self: rules.Pentadecathlon) -> numpy.ndarray[Any, Any]

___init___
def (self: rules.ChaCha)

__init__
def (self: rules.RandomBox, shape: Tuple[Literal[3]?, Literal[3]?] =, seed: builtins.bool =)
def (self: rules.RandomBox, shape: Tuple[Literal[3]?, Literal[3]?] =, seed: builtins.int =)

layout
def (self: rules.RandomBox) -> Any

__init__
def (self: rules.Box)

layout
def (self: rules.Box) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Seed)

layout
def (self: rules.Seed) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Moon)

layout
def (self: rules.Moon) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Kite)

layout
def (self: rules.Kite) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.Eater1)

layout
def (self: rules.Eater1) -> numpy.ndarray[Any, Any]

__init__
def (self: rules.SwitchEngine)

layout
def (self: rules.SwitchEngine) -> numpy.ndarray[Any, Any]

_load_file_of_url
def (path: builtins.str) -> Any

cells2rle
def (cells_str: builtins.str) -> builtins.str
def (cells_str: builtins.set[builtins.str]) -> builtins.str
def (cells_str: builtins.list[builtins.str]) -> builtins.str

rle2cells
def (rle_str: builtins.str) -> builtins.str

parse_rle
def (rle_str: builtins.str) -> rules.Custom

add
def (self: rules.Board, lifeform: Any, loc: numpy.ndarray[Any, Any])
def (self: rules.Board, lifeform: Any, loc: builtins.list[builtins.int])
def (self: rules.Board, lifeform: Any, loc: builtins.bytes)

run
def (self: rules.Simulator, rule: Any, iters: builtins.bool, **kwargs: builtins.dict[builtins.str, builtins.object]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: rules.Simulator, rule: Any, iters: numpy.ndarray[Any, Any], **kwargs: builtins.dict[builtins.str, builtins.object]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: rules.Simulator, rule: Any, iters: builtins.int, **kwargs: builtins.dict[builtins.str, builtins.object]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]

__init__
def (self: rules.Custom, X: numpy.ndarray[Any, Any])

layout
def (self: rules.ChaCha) -> Any

parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
def (plaintext_str: builtins.list[Any]) -> numpy.ndarray[Any, Any]

parse_cells
def (cells_str: builtins.str) -> rules.Custom

parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
def (plaintext_str: builtins.list[Any]) -> numpy.ndarray[Any, Any]

