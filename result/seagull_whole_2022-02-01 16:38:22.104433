_count_neighbors
def (X: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, Any]

_parse_rulestring
def (r: builtins.str) -> Tuple[builtins.list[builtins.int*], builtins.list[builtins.int*]]

life_rule
def (X: numpy.ndarray[Any, Any], rulestring: builtins.str) -> Any

conway_classic
def (X: numpy.ndarray[Any, Any]) -> Any

shannon_entropy
def (state: numpy.ndarray[Any, Any]) -> Union[numpy.ndarray[Any, numpy.dtype[numpy.timedelta64]], numpy.ndarray[Any, numpy.dtype[Any]], Any]

cell_coverage
def (state: numpy.ndarray[Any, Any]) -> numpy.ndarray[Any, numpy.dtype[numpy.floating[numpy.typing._64Bit]]]

parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Board, size: Tuple[Literal[100]?, Literal[100]?] =)

clear
def (self: seagull.Board)

view
def (self: seagull.Board, figsize: Tuple[Literal[5]?, Literal[5]?] =) -> Tuple[Any, Any]

__init__
def (self: seagull.Simulator, board: seagull.Board)

compute_statistics
def (self: seagull.Simulator, history: builtins.list[numpy.ndarray[Any, Any]]) -> builtins.dict[builtins.str*, numpy.ndarray*[Any, Any]]
def (self: seagull.Simulator, history: numpy.ndarray[Any, Any]) -> builtins.dict[builtins.str*, numpy.ndarray*[Any, Any]]
def (self: seagull.Simulator, history: builtins.set[numpy.ndarray[Any, Any]]) -> builtins.dict[builtins.str*, numpy.ndarray*[Any, Any]]

get_history
def (self: seagull.Simulator, exclude_init: builtins.bool =) -> Any

size
def (self: seagull.Lifeform) -> builtins.tuple[builtins.int]

view
def (self: seagull.Lifeform, figsize: Tuple[Literal[5]?, Literal[5]?] =) -> Tuple[Any, Any]

validate_input_values
def (self: seagull.Custom, X: Any)

validate_input_shapes
def (self: seagull.Custom, X: numpy.ndarray[Any, Any])

layout
def (self: seagull.Custom) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Glider)

layout
def (self: seagull.Glider) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.LightweightSpaceship)

layout
def (self: seagull.LightweightSpaceship) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.MiddleweightSpaceship)

layout
def (self: seagull.MiddleweightSpaceship) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Unbounded)

layout
def (self: seagull.Unbounded) -> numpy.ndarray[Any, Any]

___init___
def (self: seagull.Century)

layout
def (self: seagull.Century) -> numpy.ndarray[Any, Any]

___init___
def (self: seagull.Thunderbird)

layout
def (self: seagull.Thunderbird) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Blinker, length: Literal[3]? =)

layout
def (self: seagull.Blinker) -> numpy.ndarray[Any, numpy.dtype[Any]]

__init__
def (self: seagull.Toad)

layout
def (self: seagull.Toad) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Pulsar)

layout
def (self: seagull.Pulsar) -> Any

__init__
def (self: seagull.FigureEight)

layout
def (self: seagull.FigureEight) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Beacon)

layout
def (self: seagull.Beacon) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Pentadecathlon)

layout
def (self: seagull.Pentadecathlon) -> numpy.ndarray[Any, numpy.dtype[Any]]

___init___
def (self: seagull.ChaCha)

layout
def (self: seagull.ChaCha) -> numpy.ndarray[Any, numpy.dtype[numpy.bool_]]

__init__
def (self: seagull.RandomBox, shape: Tuple[Literal[3]?, Literal[3]?] =, seed: builtins.bool =)
def (self: seagull.RandomBox, shape: Tuple[Literal[3]?, Literal[3]?] =, seed: builtins.int =)

layout
def (self: seagull.RandomBox) -> Any

__init__
def (self: seagull.Box)

layout
def (self: seagull.Box) -> numpy.ndarray[Any, numpy.dtype[Any]]

__init__
def (self: seagull.Seed)

layout
def (self: seagull.Seed) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Moon)

layout
def (self: seagull.Moon) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Kite)

layout
def (self: seagull.Kite) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.Eater1)

layout
def (self: seagull.Eater1) -> numpy.ndarray[Any, Any]

__init__
def (self: seagull.SwitchEngine)

layout
def (self: seagull.SwitchEngine) -> numpy.ndarray[Any, Any]

_load_file_of_url
def (path: builtins.str) -> Any

cells2rle
def (cells_str: builtins.str) -> builtins.str
def (cells_str: builtins.list[builtins.str]) -> builtins.str
def (cells_str: builtins.set[builtins.str]) -> builtins.str

rle2cells
def (rle_str: builtins.str) -> builtins.str

parse_rle
def (rle_str: builtins.str) -> seagull.Custom

add
def (self: seagull.Board, lifeform: Any, loc: builtins.list[builtins.int])
def (self: seagull.Board, lifeform: Any, loc: builtins.bytes)
def (self: seagull.Board, lifeform: Any, loc: numpy.ndarray[Any, Any])

run
def (self: seagull.Simulator, rule: Any, iters: builtins.bool, **kwargs: builtins.dict[builtins.str, builtins.object]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: seagull.Simulator, rule: Any, iters: numpy.ndarray[Any, Any], **kwargs: builtins.dict[builtins.str, builtins.object]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]
def (self: seagull.Simulator, rule: Any, iters: builtins.int, **kwargs: builtins.dict[builtins.str, builtins.object]) -> builtins.dict[builtins.str, numpy.ndarray[Any, Any]]

__init__
def (self: seagull.Custom, X: numpy.ndarray[Any, Any])

parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
def (plaintext_str: builtins.list[Any]) -> numpy.ndarray[Any, Any]

parse_cells
def (cells_str: builtins.str) -> seagull.Custom

parse_plaintext_layout
def (plaintext_str: builtins.str) -> numpy.ndarray[Any, Any]
def (plaintext_str: builtins.list[Any]) -> numpy.ndarray[Any, Any]

