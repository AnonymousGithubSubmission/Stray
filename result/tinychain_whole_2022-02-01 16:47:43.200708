outpoint
def (self: tinychain.UnspentTxOut) -> Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint]

header
def (self: tinychain.Block, nonce: builtins.object =) -> builtins.str

txn_iterator
def (chain: builtins.set[tinychain.Block]) -> typing.Generator[Tuple[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], tinychain.Block*, builtins.int], None, None]
def (chain: builtins.list[tinychain.Block]) -> typing.Generator[Tuple[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], tinychain.Block*, builtins.int], None, None]

find_txout_for_txin
def (txin: tinychain.TxIn, chain: builtins.set[tinychain.Block]) -> Tuple[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut], Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], builtins.int, builtins.bool, builtins.int]
def (txin: tinychain.TxIn, chain: builtins.list[tinychain.Block]) -> Tuple[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut], Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], builtins.int, builtins.bool, builtins.int]

locate_block
def (block_hash: builtins.object, chain: builtins.list[tinychain.Block] =) -> Tuple[tinychain.Block*, builtins.int, builtins.int]

get_current_height
def () -> builtins.int

get_median_time_past
def (num_last_blocks: builtins.bool) -> Union[Literal[0]?, builtins.int]
def (num_last_blocks: builtins.int) -> Union[Literal[0]?, builtins.int]

add_to_utxo
def (txout: tinychain.TxOut, tx: tinychain.Block, idx: builtins.bool, is_coinbase: builtins.bool, height: builtins.bool)
def (txout: tinychain.UnspentTxOut, tx: tinychain.Block, idx: builtins.bool, is_coinbase: builtins.bool, height: builtins.bool)
def (txout: tinychain.TxOut, tx: tinychain.Transaction, idx: builtins.bool, is_coinbase: builtins.bool, height: builtins.bool)

rm_from_utxo
def (txid: builtins.str, txout_idx: builtins.bool)
def (txid: builtins.str, txout_idx: builtins.int)

find_utxo_in_list
def (txin: tinychain.TxIn, txns: builtins.set[tinychain.Transaction]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]
def (txin: tinychain.TxIn, txns: builtins.list[tinychain.Transaction]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

find_utxo_in_mempool
def (txin: tinychain.TxIn) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

get_merkle_root_of_txns
def (txns: builtins.set[tinychain.Block]) -> Any
def (txns: builtins.list[tinychain.Block]) -> Any
def (txns: builtins.list[tinychain.Transaction]) -> Any

handle
def (self: tinychain.AddPeerMsg, sock: builtins.object, peer_hostname: builtins.object)

read_all_from_socket
def (req: socket.socket) -> builtins.object

int_to_8bytes
def (a: builtins.object) -> builtins.bytes

encode_socket_data
def (data: builtins.object) -> builtins.bytes

pubkey_to_address
def (pubkey: builtins.bytes) -> Any

init_wallet
def (path: builtins.str =) -> Tuple[Any, Any, Any]
def (path: builtins.int =) -> Tuple[Any, Any, Any]
def (path: builtins.float =) -> Tuple[Any, Any, Any]

__init__
def (self: tinychain.BaseException, msg: builtins.object)

sha256d
def (s: builtins.bytes) -> builtins.str

validate_basics
def (self: tinychain.Transaction, as_coinbase: builtins.bool =)

validate_block
def (block: tinychain.Block) -> Union[Tuple[tinychain.Block, builtins.int], Tuple[tinychain.Block, builtins.int], Tuple[tinychain.Block, builtins.int]]

connect_block
def (block: tinychain.Block, doing_reorg: builtins.bool =) -> Union[None, None]

disconnect_block
def (block: tinychain.Block, chain: builtins.list[tinychain.Block] =) -> tinychain.Block*

locate_block
def (block_hash: builtins.object, chain: builtins.list[Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block]] =) -> Tuple[Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block], builtins.int, builtins.int]

reorg_if_necessary
def () -> builtins.bool

save_to_disk
def ()

load_from_disk
def ()

get_next_work_required
def (prev_block_hash: builtins.object) -> Union[builtins.int, builtins.int, builtins.int, builtins.int, builtins.int]

assemble_and_solve_block
def (pay_coinbase_to_addr: builtins.object, txns: builtins.list[tinychain.Transaction] =) -> Any

get_block_subsidy
def () -> Union[Literal[0]?, builtins.int]

mine
def (block: Any)

mine_forever
def ()

validate_txn
def (txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], as_coinbase: builtins.bool =, siblings_in_block: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]] =, allow_utxo_from_mempool: builtins.bool =) -> Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]

validate_signature_for_spend
def (txin: tinychain.TxIn, utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: tinychain.TxIn, utxo: tinychain.UnspentTxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool

add_txn_to_mempool
def (txn: tinychain.Transaction)

handle
def (self: tinychain.GetBlocksMsg, sock: builtins.object, peer_hostname: builtins.object)

handle
def (self: Any, sock: builtins.object, peer_hostname: builtins.object)

handle
def (self: tinychain.GetUTXOsMsg, sock: socket.socket, peer_hostname: builtins.object)

handle
def (self: tinychain.GetMempoolMsg, sock: socket.socket, peer_hostname: builtins.object)

handle
def (self: tinychain.GetActiveChainMsg, sock: socket.socket, peer_hostname: builtins.object)

send_to_peer
def (data: builtins.object, peer: builtins.object =)
def (data: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], peer: builtins.object =)

handle
def (self: tinychain.TCPHandler)

get_merkle_root_of_txns
def (txns: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]]) -> Any

validate_txn
def (txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], as_coinbase: builtins.bool =, siblings_in_block: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]] =, allow_utxo_from_mempool: builtins.bool =) -> Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]

rm_from_utxo
def (txid: builtins.str, txout_idx: builtins.bool)
def (txid: builtins.str, txout_idx: builtins.int)

add_to_utxo
def (txout: tinychain.TxOut, tx: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], idx: builtins.bool, is_coinbase: builtins.bool, height: builtins.bool)
def (txout: tinychain.TxOut, tx: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], idx: builtins.int, is_coinbase: builtins.bool, height: builtins.bool)
def (txout: tinychain.TxOut, tx: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], idx: builtins.bool, is_coinbase: builtins.bool, height: builtins.int)

find_txout_for_txin
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], chain: builtins.set[tinychain.Block]) -> Tuple[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut], Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], builtins.int, builtins.bool, builtins.int]
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], chain: builtins.list[tinychain.Block]) -> Tuple[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut], Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], builtins.int, builtins.bool, builtins.int]

locate_block
def (block_hash: builtins.object, chain: builtins.list[Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block]] =) -> Tuple[Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block], builtins.int, builtins.int]

encode_socket_data
def (data: builtins.object) -> builtins.bytes
def (data: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bytes
def (data: builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]]) -> builtins.bytes

mine
def (block: Any)

find_utxo_in_list
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], txns: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

find_utxo_in_mempool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

validate_signature_for_spend
def (txin: tinychain.TxIn, utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: tinychain.TxIn, utxo: tinychain.UnspentTxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool

send_to_peer
def (data: builtins.object, peer: builtins.object =)
def (data: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], peer: builtins.object =)

add_txn_to_mempool
def (txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction])

connect_block
def (block: Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block], doing_reorg: builtins.bool =) -> Union[None, None]

find_utxo_in_list
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], txns: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

find_utxo_in_mempool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

validate_signature_for_spend
def (txin: tinychain.TxIn, utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: tinychain.TxIn, utxo: tinychain.UnspentTxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool

encode_socket_data
def (data: builtins.object) -> builtins.bytes
def (data: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bytes
def (data: builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]]) -> builtins.bytes

validate_txn
def (txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], as_coinbase: builtins.bool =, siblings_in_block: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]] =, allow_utxo_from_mempool: builtins.bool =) -> Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]

send_to_peer
def (data: builtins.object, peer: builtins.object =)
def (data: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], peer: builtins.object =)

validate_block
def (block: tinychain.Block) -> Union[Tuple[tinychain.Block, builtins.int], Tuple[tinychain.Block, builtins.int], Tuple[tinychain.Block, builtins.int]]
def (block: Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block]) -> Union[Tuple[Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block], builtins.int], Tuple[Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block], builtins.int], Tuple[Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.int, builtins.int, builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]], builtins.str, fallback=tinychain.Block], builtins.int]]

rm_from_utxo
def (txid: builtins.str, txout_idx: builtins.bool)
def (txid: builtins.str, txout_idx: builtins.int)

add_to_utxo
def (txout: tinychain.TxOut, tx: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], idx: builtins.bool, is_coinbase: builtins.bool, height: builtins.bool)
def (txout: tinychain.TxOut, tx: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], idx: builtins.int, is_coinbase: builtins.bool, height: builtins.bool)
def (txout: tinychain.TxOut, tx: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], idx: builtins.bool, is_coinbase: builtins.bool, height: builtins.int)

find_utxo_in_list
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], txns: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

find_utxo_in_mempool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

validate_signature_for_spend
def (txin: tinychain.TxIn, utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: tinychain.TxIn, utxo: tinychain.UnspentTxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool

encode_socket_data
def (data: builtins.object) -> builtins.bytes
def (data: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bytes
def (data: builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]]) -> builtins.bytes

get_merkle_root_of_txns
def (txns: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]]) -> Any

validate_txn
def (txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction], as_coinbase: builtins.bool =, siblings_in_block: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]] =, allow_utxo_from_mempool: builtins.bool =) -> Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]

find_utxo_in_list
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], txns: builtins.list[Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

find_utxo_in_mempool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]) -> Union[None, Tuple[builtins.int, builtins.str, builtins.str, builtins.int, builtins.bool, builtins.int, fallback=tinychain.UnspentTxOut]]

validate_signature_for_spend
def (txin: tinychain.TxIn, utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: tinychain.TxIn, utxo: tinychain.UnspentTxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool
def (txin: Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn], utxo: tinychain.TxOut, txn: Tuple[builtins.list[Tuple[Tuple[builtins.str, builtins.int, fallback=tinychain.OutPoint], builtins.bytes, builtins.bytes, builtins.int, fallback=tinychain.TxIn]], builtins.list[Tuple[builtins.int, builtins.str, fallback=tinychain.TxOut]], builtins.int, builtins.bool, builtins.str, fallback=tinychain.Transaction]) -> builtins.bool

